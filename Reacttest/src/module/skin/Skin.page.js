import React, {Component} from 'react';import {View,Image,Dimensions} from 'react-native';import Theme, {createStyle, createTheme} from '../theming/lib/index';import RNFS,{ExternalStorageDirectoryPath,downloadFile} from "react-native-fs";import {unzip} from "react-native-zip-archive";const {width: SCREEN_WIDTH, height: SCREEN_HEIGHT} = Dimensions.get('window');const themes = [    createTheme({        icon: require('../../imgs/default.png'),        textColor: 'yellow',    }, 'Default'),];export default class SkinDemo extends Component {    constructor(props, context) {        super(props, context);        this.state = {            skins: themes        };    }    componentWillMount() {        this.downloadFile()    }    downloadFile= () =>  {        const downloadDest = `${ExternalStorageDirectoryPath}/ReactTest/theme/Theme.zip`;        const formUrl = 'https://creditroad.dianrong.com/static/Theme.zip';        RNFS.mkdir(`${ExternalStorageDirectoryPath}/ReactTest/theme/`,{NSURLIsExcludedFromBackupKey:true})        const options = {            fromUrl: formUrl,            toFile: downloadDest,            background: true,            begin: (res) => {                 console.log('begin', res);                console.log('contentLength:', res.contentLength / 1024 / 1024, 'M');            },            progress: (res) => {                let pro = res.bytesWritten / res.contentLength;                 console.log('progress', pro);            }        };        try {            const ret = downloadFile(options);            ret.promise.then(res => {                 console.log('success', res);                console.log('file://' + downloadDest);                this.unZip();            }).catch(err => {                 console.log('err', err);            });        }        catch (e) {            console.log(e);        }    }    unZip = () => {        const sourcePath = `${ExternalStorageDirectoryPath}/ReactTest/theme/Theme.zip`        const targetPath = `${ExternalStorageDirectoryPath}/ReactTest/theme/`        unzip(sourcePath, targetPath)            .then((path) => {                console.log(`unzip completed at ${path}`)                this.readText()            })            .catch((error) => {                console.log(error)            })    }    readText= () =>  {        console.log("data-->","readText")        const path = `${ExternalStorageDirectoryPath}/ReactTest/theme/theme.json`        return RNFS.readFile(path)            .then((result) => {                console.log(result);                var data = JSON.parse(result);                console.log("data-->",data)                data.icon={uri:`file://${ExternalStorageDirectoryPath}/ReactTest/theme/${data.icon}`};                console.log("data--<--",data)                themes.push(createTheme(data, 'Skin'));                this.setState({ skins: themes });            })            .catch((err) => {                console.log(err.message);            });    }    render() {        themes[0].apply();        return (            <Theme.View style={{                flex: 1,                justifyContent: 'center',                alignItems: 'center',                backgroundColor: 'white'            }}>                <Theme.Image style={{width:100,height:100}} source="@icon"/>                <View style={{flexDirection: 'row'}}>                    {themes.map(theme => (                        <Theme.Text                            key={theme.name}                            onPress={() => theme.apply()}                            style={[styles.buttonText, {                                fontSize: 14,                                alignItems: 'center',                                flex: 1,                                margin: 10,                                padding: 10,                                borderRadius: 3                            }]}>{theme.name}</Theme.Text>                    ))                    }                </View>            </Theme.View>        );    }}const styles = createStyle({    buttonText: {        backgroundColor: '@textColor',    },});