import React, {Component} from 'react';import {Dimensions, processColor, StyleSheet, Text, View} from 'react-native';import PieChart from '../../view/chart/PieChart';const ReactNative = require('ReactNative');const UIManager = require('UIManager');const {width: SCREEN_WIDTH, height: SCREEN_HEIGHT,} = Dimensions.get('window');export default class PieChartLegend extends React.Component {    constructor(props) {        super(props);        let values = this.props.values || [];        let colors = this.props.colors || [];        if (values.length !== colors.length) {            new Error('values.length!==colors.length')        }        if ((props.tags || []) !== colors.length) {            new Error('tags.length!==colors.length')        }        let dataColor = []        for (index in colors) {            dataColor.push(processColor(colors[index]));        }        ///////////////////////以下属性不支持state动态变化///////////////////////////////        this.entryLabelColor = this.props.entryLabelColor || processColor('black');        this.entryLabelTextSize = this.props.entryLabelTextSize || 0;        this.valueTextSize = this.props.valueTextSize || 0;        this.valueTextColor = this.props.valueTextColor || processColor('black');        this.holeRadius = this.props.holeRadius || 0;        this.chartBackgroundColor = this.props.chartBackgroundColor || processColor('transparent');        this.onSelect = this.props.onSelect;        ////////////////////////////////////////////////////////////////////////////////        this.state = {            data: {                dataSets: [{                    values: values,                    label: '',                    config: {                        colors: dataColor,                        valueTextSize: this.valueTextSize,                        valueTextColor: this.valueTextColor,                        sliceSpace: 0,                        selectionShift: 0,                    }                }],            },            tags: this.props.tags || [],            colors: colors        };    }    componentWillReceiveProps(nextProps) {        let dataColor = []        for (index in nextProps.colors) {            dataColor.push(processColor(nextProps.colors[index]));        }        this.setState({            data: {                dataSets: [{                    values: nextProps.values,                    label: '',                    config: {                        colors: dataColor,                        valueTextSize: this.valueTextSize,                        valueTextColor: this.valueTextColor,                        sliceSpace: 0,                        selectionShift: 0,                    }                }],            },            tags: nextProps.tags || [],            colors: nextProps.colors        })    }    animateY = () => {        UIManager.dispatchViewManagerCommand(            ReactNative.findNodeHandle(this.pieChart),            0,            null        );    }    render() {        return (            <View style={styles.container}>                <PieChart                    ref={(c) => {                        this.pieChart = c;                    }}                    style={styles.chart}                    rotationEnabled={false}                    usePercentValues={false}                    logEnabled={true}                    chartDescription={{text: '',}}                    chartBackgroundColor={this.chartBackgroundColor}                    data={this.state.data}                    legend={{enabled: false,}}                    entryLabelColor={this.entryLabelColor}                    entryLabelTextSize={this.entryLabelTextSize}                    drawEntryLabels={this.entryLabelTextSize !== 0}                    holeRadius={this.holeRadius}                    holeColor={processColor('transparent')}                    transparentCircleRadius={0}                    transparentCircleColor={processColor('transparent')}                    transparentCircleAlpha={0}                    onSelect={this.onSelect}                />                <View>                    {                        this.state.colors && this.state.colors.map((data, idx) => {                            return (                                <DotText                                    key={idx}                                    color={data}                                    size={20}                                    dotTextColor={this.props.dotTextColor || 'black'}                                    dotTextSize={this.props.dotTextSize || 20}                                    dotTextContent={this.state.tags[idx] || ""}                                >                                </DotText>                            );                        })                    }                </View>            </View>        );    }}const styles = StyleSheet.create({    container: {        flex: 1,        flexDirection: 'row',        justifyContent: 'space-between',        width: SCREEN_WIDTH,    },    chart: {        width: 200,        height: 200,        marginRight: 90    }});class DotText extends Component {    constructor(props, context) {        super(props, context)    }    render() {        return (            <View style={{                flexDirection: 'row',                paddingTop: 2,                paddingBottom: 2,                alignItems: 'center'            }}>                <View style={{                    backgroundColor: this.props.color || 'red',                    width: this.props.size || 4,                    height: this.props.size || 4,                    borderRadius: (this.props.size / 2) || 2,                    marginRight: 5                }}>                </View>                <Text style={{                    color: this.props.dotTextColor,                    fontSize: this.props.dotTextSize                }}>{this.props.dotTextContent}</Text>            </View>        );    }}